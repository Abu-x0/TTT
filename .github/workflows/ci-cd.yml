name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  QT_VERSION: 5.15.2
  CMAKE_VERSION: 3.16.0

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        include:
          - os: ubuntu-latest
            qt_host: linux
            qt_target: desktop
            qt_arch: gcc_64
          - os: windows-latest
            qt_host: windows
            qt_target: desktop
            qt_arch: win64_msvc2019_64
          - os: macos-latest
            qt_host: mac
            qt_target: desktop
            qt_arch: clang_64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: ${{ matrix.qt_host }}
        target: ${{ matrix.qt_target }}
        arch: ${{ matrix.qt_arch }}
        cache: true
        cache-key-prefix: ${{ runner.os }}-qt

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=${{ env.Qt5_Dir }}

    - name: Build application
      working-directory: build
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

    - name: Package application (Windows)
      if: matrix.os == 'windows-latest' && matrix.build_type == 'Release'
      working-directory: build
      run: |
        windeployqt.exe --qmldir .. --compiler-runtime TicTacToe.exe
        7z a TicTacToe-Windows-x64.zip TicTacToe.exe *.dll platforms/ styles/ imageformats/

    - name: Package application (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
      working-directory: build
      run: |
        mkdir -p TicTacToe-Linux/
        cp TicTacToe TicTacToe-Linux/
        linuxdeployqt TicTacToe-Linux/TicTacToe -appimage
        tar -czf TicTacToe-Linux-x64.tar.gz TicTacToe-Linux/

    - name: Package application (macOS)
      if: matrix.os == 'macos-latest' && matrix.build_type == 'Release'
      working-directory: build
      run: |
        macdeployqt TicTacToe.app -dmg
        mv TicTacToe.dmg TicTacToe-macOS-x64.dmg

    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: TicTacToe-${{ matrix.os }}
        path: |
          build/*.zip
          build/*.tar.gz
          build/*.dmg
          build/*.AppImage

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: linux
        target: desktop
        arch: gcc_64

    - name: Install static analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --xml --xml-version=2 --output-file=cppcheck-report.xml src/ 2>&1 || true

    - name: Run clang-tidy
      run: |
        find src/ -name "*.cpp" -exec clang-tidy {} -- -I${{ env.Qt5_Dir }}/include \;

    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          cppcheck-report.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  deploy:
    if: github.event_name == 'release'
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release assets
      run: |
        ls -la
        mkdir release-assets
        find . -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" -o -name "*.AppImage" | xargs -I {} cp {} release-assets/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
